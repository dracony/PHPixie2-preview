<?php
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-04-19 at 11:12:00.
 */
class ValidateTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Validate
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
		$pixie = new \PHPixie\Pixie;
        $this->object = new \PHPixie\Validate($pixie);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers PHPixie\Validate::get
     * @todo   Implement testGet().
     */
    public function testGet()
    {
		$this->assertEquals('PHPixie\Validate\Validator',get_class($this->object->get()));
    }

    /**
     * @covers PHPixie\Validate::filled
     * @todo   Implement testFilled().
     */
    public function testFilled()
    {
        $this->assertEquals(true, $this->object->filled('aaaa'));
		$this->assertEquals(false,$this->object->filled(null));
    }

    /**
     * @covers PHPixie\Validate::alpha
     * @todo   Implement testAlpha().
     */
    public function testAlpha()
    {
       $this->assertEquals(true, $this->object->alpha('aaaa'));
	   $this->assertEquals(false,$this->object->alpha('aaaa1'));
    }

    /**
     * @covers PHPixie\Validate::numeric
     * @todo   Implement testNumeric().
     */
    public function testNumeric()
    {
        $this->assertEquals(true, $this->object->numeric(1111));
		$this->assertEquals(false,$this->object->numeric('a1'));
    }

    /**
     * @covers PHPixie\Validate::alpha_numeric
     * @todo   Implement testAlpha_numeric().
     */
    public function testAlpha_numeric()
    {
        $this->assertEquals(true, $this->object->alpha_numeric('d3d3'));
		$this->assertEquals(false,$this->object->alpha_numeric('ddd--'));
    }

    /**
     * @covers PHPixie\Validate::decimal
     * @todo   Implement testDecimal().
     */
    public function testDecimal()
    {
        $this->assertEquals(true, $this->object->decimal(3));
		$this->assertEquals(true, $this->object->decimal(3.5));
		$this->assertEquals(false,$this->object->decimal('3a'));
    }

    /**
     * @covers PHPixie\Validate::phone
     * @todo   Implement testPhone().
     */
    public function testPhone()
    {
		$this->assertEquals(true, $this->object->phone('093 115 22 10'));
		$this->assertEquals(false,$this->object->phone('3a'));
    }

    /**
     * @covers PHPixie\Validate::between
     * @todo   Implement testBetween().
     */
    public function testBetween()
    {
        $this->assertEquals(true, $this->object->between(3,1,5));
		$this->assertEquals(false, $this->object->between(7,1,5));
    }

    /**
     * @covers PHPixie\Validate::matches
     * @todo   Implement testMatches().
     */
    public function testMatches()
    {
        $this->assertEquals(true, $this->object->matches('aaaa','/^[a-z]*$/'));
		$this->assertEquals(false, $this->object->matches('aaaa1','/^[a-z]*$/'));
    }

    /**
     * @covers PHPixie\Validate::url
     * @todo   Implement testUrl().
     */
    public function testUrl()
    {
        $this->assertEquals(true, $this->object->url('http://google.com'));
		$this->assertEquals(false, $this->object->url('11google.com'));
    }

    /**
     * @covers PHPixie\Validate::email
     * @todo   Implement testEmail().
     */
    public function testEmail()
    {
        $this->assertEquals(true, $this->object->email('test@test.com'));
		$this->assertEquals(false, $this->object->email('test'));
    }

    /**
     * @covers PHPixie\Validate::min_length
     * @todo   Implement testMin_length().
     */
    public function testMin_length()
    {
        $this->assertEquals(true, $this->object->min_length('12321',4));
		$this->assertEquals(false, $this->object->min_length('123',4));
    }

    /**
     * @covers PHPixie\Validate::max_length
     * @todo   Implement testMax_length().
     */
    public function testMax_length()
    {
        $this->assertEquals(true, $this->object->max_length('123',4));
		$this->assertEquals(false, $this->object->max_length('123124',4));
    }

    /**
     * @covers PHPixie\Validate::length
     * @todo   Implement testLength().
     */
    public function testLength()
    {
        $this->assertEquals(true, $this->object->max_length('123',4));
		$this->assertEquals(false, $this->object->max_length('123124',4));
    }

    /**
     * @covers PHPixie\Validate::in
     * @todo   Implement testIn().
     */
    public function testIn()
    {
		$this->assertEquals(true, $this->object->in('1',array(1,2)));
		$this->assertEquals(false, $this->object->in('1',array(3,2)));
    }

    /**
     * @covers PHPixie\Validate::equals
     * @todo   Implement testEquals().
     */
    public function testEquals()
    {
		$this->assertEquals(true, $this->object->equals('1','1'));
		$this->assertEquals(false, $this->object->equals('1','2'));
    }

    /**
     * @covers PHPixie\Validate::func
     * @todo   Implement testFunc().
     */
    public function testFunc()
    {
        $this->assertEquals(true, $this->object->func('1', function($val) {
			return $val == 1;
		}));
		$this->assertEquals(false, $this->object->func('2', function($val) {
			return $val == 1;
		}));
    }
}
